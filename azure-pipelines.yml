trigger:
  branches:
    include:
    - main
    - development
    - releases/*
  paths:
    exclude:
    - '**/*.md'
    - docs/*
pr:
  branches:
    include:
    - main
    - development
    - releases/*
  paths:
    exclude:
    - '**/*.md'
    - docs/*

stages:
- stage: Setup

  jobs:
  - job: Setup
    pool:
      vmImage: '$(vmImage)'

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Install required workloads'
      inputs:
        command: 'custom'
        custom: 'workload'
        arguments: 'install ios'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo xcode-select -s /Applications/Xcode_$(xcodeVersion).app

    - task: GitVersion@5
      inputs:
        runtime: 'core'

- stage: Build
  condition: succeeded()
  jobs:
  - job: Build
    pool:
      vmImage: '$(vmImage)'

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '-c $(buildConfiguration) -p:Version=$(GitVersion.NuGetVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '**/[Tt]est*.csproj'
        arguments: '-c $(buildConfiguration) --no-restore --collect "Code coverage"'

- stage: Pack
  condition: succeeded()
  jobs:
  - job: Pack
    pool:
      vmImage: '$(vmImage)'

    steps:
    - task: DotNetCoreCLI@2
      displayName: "Nuget pack"
      inputs:
        command: "pack"
        packagesToPack: "**/*.csproj"
        nobuild: true
        packDirectory: "$(Build.ArtifactStagingDirectory)"
        versioningScheme: byEnvVar
        versionEnvVar: "GitVersion.NuGetVersion"