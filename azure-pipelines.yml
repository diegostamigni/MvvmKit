trigger:
  branches:
    include:
    - main
    - development
    - releases/*
  paths:
    exclude:
    - '**/*.md'
    - docs/*
pr:
  branches:
    include:
    - main
    - development
    - releases/*
  paths:
    exclude:
    - '**/*.md'
    - docs/*

pool:
  vmImage: '$(vmImage)'

variables:
  Agent.Source.Git.ShallowFetchDepth: 0

steps:
- task: DotNetCoreCLI@2
  displayName: 'Install required workloads'
  inputs:
    command: 'custom'
    custom: 'workload'
    arguments: 'install ios'

- task: Bash@3
  displayName: Set Xcode version to $(xcodeVersion)
  inputs:
    targetType: 'inline'
    script: |
      sudo xcode-select -s /Applications/Xcode_$(xcodeVersion).app

- task: gitversion/setup@0
  displayName: 'Setup GitVersion'
  inputs:
    versionSpec: '5.x'

- task: gitversion/execute@0
  displayName: 'Execute GitVersion'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '-c $(buildConfiguration) -p:Version=$(GitVersion.NuGetVersion)'

- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: 'test'
    projects: '**/[Tt]est*.csproj'
    arguments: '-c $(buildConfiguration) --no-restore --collect "Code coverage"'

- task: DotNetCoreCLI@2
  displayName: "Nuget pack"
  inputs:
    command: "pack"
    packagesToPack: "**/*.csproj"
    nobuild: true
    packDirectory: "$(Build.ArtifactStagingDirectory)"
    versioningScheme: byEnvVar
    versionEnvVar: "GitVersion.NuGetVersion"